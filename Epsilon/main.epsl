/*
LetterResponse enum values:
0 = GRAY
1 = ORANGE
2 = GREEN
*/

W#LetterResponse_GRAY {return 0;}
W#LetterResponse_ORANGE {return 1;}
W#LetterResponse_GREEN {return 2;}

Str#find_best_word<[Str]:words> {
    [W]:frequencies = [[W] []].blank_from_type[26];
    for (Str:word in words) {
        for (Byte:chr in word) {
            frequencies[chr - 'a']++;
        };
    };
    W:bestScore = 0;
    Str?:best = null;
    for (Str:word in words) {
        Str:chars = [word].clone;
        [chars].unique;
        W:score = 0;
        for (Byte:chr in chars) {
            score += frequencies[chr-'a'];
        };
        if (score > bestScore) {
            bestScore = score;
            best = word;
        };
    };
    return [best].unwrap;
}

[W]#get_wordle_response<Str:guess><Str:target> {
    [W]:response = [W] [];
    for (W:i enumerating guess) {
        Byte:gchar = guess[i];
        if (gchar == target[i]) {
            [response].append[LetterResponse_GREEN];
        } elif ([target].index_of[gchar] != -1) {
            [response].append[LetterResponse_ORANGE];
        } else {
            [response].append[LetterResponse_GRAY];
        };
    };
    return response;
}

[Str]#filter_words_given_response<[Str]:words><[W]:response><Str:guess> {
    [Str]:result = [Str] [];
    W:i = 0;
    for (Str:word in words) {
        Bool:valid = true;
        for (W:j enumerating word) {
            Byte:gchar = guess[j];
            Byte:wchar = word[j];
            W:lresponse = response[j];
            Bool:validc;
            if (lresponse == LetterResponse_GREEN) {
                validc = wchar == gchar;
            } elif (lresponse == LetterResponse_ORANGE) {
                validc = wchar!=gchar && ([word].index_of[gchar]!=-1);
            } else { // LetterResponse_GRAY
                validc = [word].index_of[gchar] == -1;
            };
            if (!validc) {
                valid = false;
                break;
            };
        };
        if (valid) {
            [result].append[word];
        };
    };
    return result;
}

Bool#do_wordle<[Str]:words><Str:target> {
    for (W:i to 6) {
        Str:guess = find_best_word[words];
        if ([guess] equals [target]) {
            return true;
        };
        [W]:response = get_wordle_response[guess][target];
        words = filter_words_given_response[words][response][guess];
    };
    return false;
}

Z#main {
    File:file = open_file["words.txt"][FILE_READ_MODE];
    if (![file].is_open) {
        abort["Failed to open file"];
    };
    [Str]?:nullableWords = [file].read_lines;
    if ([nullableWords].is_null) {
        abort["Failed to read file content"];
    };
    [Str]:words = [nullableWords].unwrap;

    W:succeeded = 0;
    W:failed = 0;

    for (Str:word in words) {
        Bool:success = do_wordle[words][word];
        if (success) {
            succeeded++;
        } else {
            failed++;
        };
    };

    println[["Succeeded: "] + [[succeeded].stringify]];
    println[["Failed: "] + [[failed].stringify]];
    
    return 0;
}
